'''装饰器是将一个函数镶嵌在另一个函数中进行重复使用的目的，增加函数的使用方式，但是不用写过多冗余的代码'''
'''
简言之，python装饰器就是用于拓展原来函数功能的一种函数，这个函数的特殊之处在于它的返回值也是一个函数，
使用python装饰器的好处就是在不用更改原函数的代码前提下给函数增加新的功能。 
'''
'''1,一个简单的例子'''
def a(func):
    print(1)
    def b():
        print(2)
        func()
        print(3)
    return b
@a        #相当于c = a(c)       从而得到一个1和函数的对象b，b和b()是不一样的b只是一个对象,并不会运行，
def c():  #然后当运行到c()的时候,相当于给了b执行的参数，然后函数b开始运行，输出2，func()->4,3
    print(4)
# c()
# 1
# 2
# 4
# 3
'''
当程序运行时：先执行@a，得到一个1和函数的对象b，b和b()是不一样的
b只是一个对象,并不会运行，然后当运行到c()的时候,相当于给了b执行的
参数，然后我们会执行b函数，分别得到2，func()得到4，3，到这里程序结束
'''

'''2,当加入参数的装饰器'''
def a(func):
	print(1)
	def b(*args,**kwargs):
		print(2)
		func(*args,**kwargs)
		print(3)
	return b
@a              #得到一个1和函数的对象b，b和b()是不一样的b只是一个对象,并不会运行
def c(a,b):     #将参数（3,4）传进函数a（））
	print(a+b)
c(3,4)
# 1
# 2
# 7
# 3

#args 将参数打包为tuple给函数使用(3,4)
#kwargs将参数打包为dict给函数使用,将传入的a=1这样的参数变为{'a':1}
# 我们这里相当于 a(c(a,b))这个函数
# 所有这里的b()其实就相当于c()

'''
3.当使用多个参数的装饰器时：
'''


def a(func):
    print('i\'m a!')
    def e():
        print(1)
        func()
        print(2)
    return e

def b(func):
    print('i\'m b!')
    def d():
        print('a')
        func()
        print('b')
    return d

@a
@b
def c():
    print('!!!!!')
c()
# i'm b!
# i'm a!
# 1
# a
# !!!!!
# b
# 2

# 想了很久，首先有两个装饰器的时候，会自下而上的运行，砸门会得到两个
# 对象d,e,这里从输出可以看出
# 当我们赋予c参数时，运行d,e,运行的时候是从上往下的
# 我们先运行e()函数，输出1，运行到func()的时候会停下
# 跳转到同样的d()函数开始运行,输出a,运行到func()会执行c()函数
# 最后输出b，在输出2

